var documenterSearchIndex = {"docs":
[{"location":"#struct.jl-Documentation","page":"Home","title":"struct.jl Documentation","text":"","category":"section"},{"location":"#Andrea-Iskander-Belkhir-id-:-511089","page":"Home","title":"Andrea Iskander Belkhir id : 511089","text":"","category":"section"},{"location":"#Beyza-Özdemir-id-:-576145","page":"Home","title":"Beyza Özdemir id : 576145","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"struct is part of the julia library \"LinearAlgebraicRepresentation.jl\".this library perform geometric calculations on cellular complexes expressed through the Linear Algebraic Representation (LAR). Struct represent complex object and describe those object in they're coordinate system, in this way we can specify the edges. In the code Struct is used as a acyclic oriented graphs; an acyclic oriented graphs are a hierarchical structures formed by different component, and every component have they're different coordinate system.","category":"page"},{"location":"","page":"Home","title":"Home","text":"t(args::Array{Number,1}...)::Matrix\r\nReturn an affine transformation Matrix in homogeneous coordinates. Such `translation` Matrix has ``d+1`` rows and ``d+1`` columns, where ``d`` is the number of translation parameters in the `args` array.","category":"page"},{"location":"","page":"Home","title":"Home","text":"s(args::Array{Number,1}...)::Matrix\r\nit generate (and return)a scaling matrix. the returned matrix have d+1 row and column where d is the lenght of the array passed as arg","category":"page"},{"location":"","page":"Home","title":"Home","text":"r(args...)\r\nReturn an affine transformation Matrix in homogeneous coordinates. Such `Rotation` Matrix has *dimension* either equal to 3 or to 4, for 2D and 3D rotation, respectively.\r\nThe `{Number,1}` of `args` either contain a single `angle` parameter in radiants, or a vector with three elements, whose `norm` is the rotation angle in 3D and whose `normalized value` gives the direction of the rotation axis in 3D.","category":"page"},{"location":"","page":"Home","title":"Home","text":"removeDups(CW::Cells)::Cells\r\nRemove dublicate `cells` from `Cells` object. Then put `Cells` in *canonical form*, i.e. with *sorted indices* of vertices in each (unique) `Cells` Array element.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Struct\r\nA container of geometrical objects is defined by applying the function `Struct` to\r\nthe array of contained objects. Each value is defined in local coordinates and may be transformed by affine transformation tensors.\r\nThe value returned from the application of `Struct` to an `Array{Any, 1}` of `LAR` values, `matrices`, and `Struct` values is a value of\r\n`Struct type`.  The coordinate system of this value is the one associated with the first object of the `Struct` arguments.  Also,\r\nthe resulting geometrical value is often associated with a variable name.\r\nThe generation of containers may continue hierarchically by suitably applying `Struct`. Notice that each LAR object in a `Struct` container is transformed by each matrix before it within the container, going from right to left. The action of a transformation (tensor) extends to each object on its right within its own container. Whereas,  the action of a tensor does not extend outside its container, according to the semantics of PHIGS structures.","category":"page"},{"location":"","page":"Home","title":"Home","text":"clone(self::struct,i::int)::Struct\r\nreturn a clone of the struct as object called newobj,the int in the arg is used to modify the name of the copy if needed","category":"page"},{"location":"","page":"Home","title":"Home","text":"struct2lar(structure::Struct)::Union{LAR,LARmodel}\r\nit turn the stuct into is linear algebraic representation as a tuple(vertices,faces(cells),edges). it basicaly flat the struct into a unique data struct of lar type by doing a search on the \"tree\" defined by the struct.","category":"page"},{"location":"","page":"Home","title":"Home","text":"embedTraversal(cloned::Struct,obj::Struct,n::Int,suffix::String)\r\nreturn the cloned obj of struct type who consist in a struct with the same body as the struct obj passed as arg.every element of the body is visited and copied in the struct cloned using local variable to support, the element in the body can have diffent type : tuple,array or other struct","category":"page"},{"location":"","page":"Home","title":"Home","text":"embedStruct(n::Int)(self::Struct,suffix::String=\"New\")\r\nits used to cast embededstruct0 as currying funcion(typical in funcional programming EmbededStruct(int)(Struct,String=\"new\"))","category":"page"},{"location":"","page":"Home","title":"Home","text":"\r\nEmbededStruct0(self::STruct,suffix::string=\"new\")\r\nit creates a copy of the self arg and it change the dimension with a factor of \"n\" and also append the suffix \"new\" on the name.and at the end return this copy","category":"page"},{"location":"","page":"Home","title":"Home","text":"box(model)\r\nreturn [min,max], those parameter define the containment zone of the struct, if the parameter min return as 0 this mean we used the origin of the coordinate system","category":"page"},{"location":"","page":"Home","title":"Home","text":"apply(affineMatrix::Array{Float64,2}, larmodel::Union{LAR,LARmodel})\r\nmodify the larmodel in input and it return as a tuple(geometry,topology),where geometry as point and topology as cells's array the affinate matrix in input is used with the parameter W to modify the vertices.","category":"page"},{"location":"","page":"Home","title":"Home","text":"checkStruct(lst)\r\nreturn the lenght(dimension) of lst","category":"page"},{"location":"","page":"Home","title":"Home","text":"traversal(CTM,stack,obj,scene=[])\r\ntrasform the gerarchic in a unique coordinate system(world coordinate), the body of the obj is deepth-first searched and during the visit is used and updated the ctm matrix (by moltiplication the vertices(self multiplication)) during the visit we use the stack by pushing and poping the current ctm","category":"page"},{"location":"","page":"Home","title":"Home","text":"evalStruct(self)\r\nevaluete the struct in input,iniziate the ctm matrix with the dimension of (dimension of the struct)+1 x (dimension of the struct)+1 and return the struct turned into world coordinate using the traversal funcion\r\n","category":"page"}]
}
